import:
  - ./tasks.yaml

known_hosts_file: known_hosts
disable_verify_host: true

servers:
  localhost:
    desc: localhost
    host: localhost
    local: true
    tags: [local]

  list:
    desc: many hosts using list of hosts
    hosts:
      - 172.24.2.2
      - 172.24.2.4
      - 172.24.2.5
      - 172.24.2.6
      - 172.24.2.7
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, many, list, "hej san"]
    env:
      hello: world
      host: 172.24.2.4

  range:
    desc: many hosts using range
    hosts: 172.24.2.[4:6:1]
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, many, range]
    env:
      hello: world
      host: 172.24.2.4

  inv:
    desc: many hosts using inventory
    inventory: ./inventory.sh $opt
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, many, inv]
    env:
      hello: world
      hosts: 172.24.2.4

  server-1:
    desc: server-1 desc
    host: sake-resolve
    tags: [remote, pi]
    work_dir: /tmp

  server-2:
    desc: server-2 desc
    host: sake-resolve
    tags: [remote, pi]

  server-3:
    desc: server-3 desc
    host: 172.24.2.4
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, pihole]

  server-4:
    desc: server-4 desc
    host: 172.24.2.5
    user: test
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, pi, pihole]

  ip6-1:
    desc: ip6-1 desc
    host: test@[2001:3984:3989::10]:22
    user: test
    password: test
    tags: [remote, reachable]

  ip6-2:
    desc: ip6-2 desc
    host: 2001:3984:3989::11
    port: 33
    user: test
    password: test
    tags: [remote, reachable]

targets:
  all:
    desc: Select all
    all: true

  limit:
    all: true
    limit: 3

  limit_p:
    all: true
    limit: 50

  list:
    servers: [list]

  regex:
    regex: 192

  servers:
    servers: [server-1, server-2]

  tags:
    tags: [remote, reachable]

  mult:
    desc: Info
    all: true
    regex: 192
    servers: [server-1, range]
    tags: [remote]
    limit: 3

specs:
  table:
    output: table
    # describe: true
    silent: true

  text:
    output: text

  info:
    desc: Info
    output: table
    ignore_errors: true
    ignore_unreachable: true
    any_errors_fatal: false

  free:
    desc: Free
    strategy: free
    batch: 2
    # forks: 2
    output: text
    ignore_errors: false
    ignore_unreachable: true
    # any_errors_fatal: true
    max_fail_percentage: 60

  row:
    desc: Row
    strategy: row
    # forks: 2
    batch: 2
    # batch_p: 50
    output: text
    ignore_errors: false
    ignore_unreachable: false
    # any_errors_fatal: true
    max_fail_percentage: 60
    report: [basic]

  column:
    # desc: Column
    strategy: column
    # forks: 1
    # batch: 1
    # batch_p: 50
    # output: text
    # ignore_errors: false
    # ignore_unreachable: true
    ## any_errors_fatal: false
    # max_fail_percentage: 59

env:
  VERSION: v0.1.0
  DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")

tasks:
  exit:
    # target: all
    # spec: column
    tasks:
      - cmd: |
          if [[ $SAKE_SERVER_NAME == "list-0" || $SAKE_SERVER_NAME == "list-2" ]]; then
            exit 1
          else
            echo 123
          fi
          # sleep 1
        ignore_errors: true
      - cmd: |
          if [[ $SAKE_SERVER_NAME == "list-1" || $SAKE_SERVER_NAME == "list-2" ]]; then
            exit 1
          else
            echo 123
          fi
          # sleep 1
        ignore_errors: true
      - cmd: |
          echo "DONE"

          # for i in {1..5}
          # do
          #    sleep $(shuf -i1-4 -n1)
          #    echo "$i"
          # done
          # exit 1

  # register:
  #   target: all
  #   spec: row
  #   desc: ping server
  #   tasks:
  #     - cmd: |
  #         if [[ $SAKE_SERVER_HOST == "localhost" ]]; then
  #           exit 1
  #         else
  #           sleep $(shuf -i1-2 -n1)
  #           echo "$SAKE_SERVER_NAME"
  #         fi

  #         >&2 echo "error"
  #         >&1 echo "stdout"
  #         >&2 echo "error"
  #         # sudo apt-get install htop -y
  #         # sleep 2 && >&2 echo "error"
  #         # >&1 echo "stdout"
  #         # sleep 2 && >&2 echo "error"
  #       register: hej
  #     - cmd: echo $hej

  #     # - cmd: |
  #     #     echo 123
  #     #     echo 345
  #     #   register: kaka
  #     # - cmd: |
  #     #     if [[ $SAKE_TASK_EXIT == 1 ]]; then
  #     #       echo $SAKE_TASK_EXIT
  #     #     else
  #     #       echo $SAKE_TASK_OUT
  #     #     fi
  #     #   register: kaka
  #     # - cmd: |
  #     #     # echo $hej
  #     #     # echo $hej_stdout
  #     #     echo "$hej_stderr"
  #     #     # echo $hej_rc
  #     #     # echo $hej_failed
  #     #     # echo
  #     #     # echo $kaka
  #     #     # echo $kaka_rc
  #     #     # echo $kaka_failed

  # # exit:
  # #   # name: hej
  # #   local: true
  # #   cmd: exit 3

  # ping:
  #   target: all
  #   spec: column
  #   desc: ping server
  #   # cmd: echo pong
  #   tasks:
  #     - cmd: echo 123
  #     - cmd: echo 321

  # # sleep:
  # #   desc: ping server
  # #   cmd: sleep 2 & echo done

  # # info:
  # #   name: Info
  # #   desc: print info
  # #   target: all
  # #   tasks:
  # #     - task: print-host
  # #     - task: print-hostname
  # #     - task: print-os
  # #     - task: print-kernel

  # # # Info
  # # print-host:
  # #   name: Host
  # #   desc: print host
  # #   spec: info
  # #   target: all
  # #   cmd: echo $SAKE_SERVER_HOST

  # # print-hostname:
  # #   name: Hostname
  # #   desc: print hostname
  # #   spec: info
  # #   target: all
  # #   cmd: hostname

  # # print-os:
  # #   name: OS
  # #   desc: print OS
  # #   spec: info
  # #   target: all
  # #   cmd: |
  # #     os=$(lsb_release -si)
  # #     release=$(lsb_release -sr)
  # #     echo "$os $release"

  # # print-kernel:
  # #   name: Kernel
  # #   desc: Print kernel version
  # #   spec: info
  # #   target: all
  # #   cmd: uname -r | awk -v FS='-' '{print $1}'
