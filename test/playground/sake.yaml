import:
  - ./tasks/tasks.yaml

known_hosts_file: known_hosts
disable_verify_host: true

servers:
  localhost:
    desc: localhost
    host: 0.0.0.0
    local: true
    tags: [local]

  # performance:
  #   user: test
  #   identity_file: ../keys/id_ed25519_pem_no
  #   inventory: |
  #     num_hosts=$((9999 + $SAKE_NUM_HOSTS))
  #     for port in $(seq 10000 $num_hosts); do echo "0.0.0.0:$port"; done
  #   env:
  #     SAKE_NUM_HOSTS: 1

  list:
    desc: many hosts using list of hosts
    hosts:
      - 172.24.2.2
      - 172.24.2.4
      - 172.24.2.5
      - 172.24.2.6
      - 172.24.2.7
    user: test
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, pi, many, list, 'hej san']
    env:
      hello: world
      host: 172.24.2.4

  range:
    desc: many hosts using range
    hosts: 172.24.2.[4:6:1]
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, many, range]
    env:
      hello: world
      host: 172.24.2.4

  inv:
    desc: many hosts using inventory
    inventory: ./inventory.sh $opt
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, many, inv]
    env:
      hello: world
      hosts: 172.24.2.4

  server-1:
    desc: server-1 desc
    host: sake-resolve
    tags: [remote, pi, bastion]
    work_dir: /tmp

  server-2:
    desc: server-2 desc
    host: sake-resolve
    tags: [remote, pi, bastion]

  server-3:
    desc: server-3 desc
    host: 172.24.2.4
    user: test
    identity_file: ../keys/id_ed25519_pem_no
    tags: [remote, pi, pihole]
    env:
      FOO: 123

  server-4:
    desc: server-4 desc
    host: 172.24.2.5
    user: test
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, pi, pihole]

  server-5:
    desc: server-5 desc
    user: test
    host: test@172.24.2.10:22
    bastion: 172.24.2.98:22
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, bastion]
    work_dir: /tmp
    env:
      hello: world

  server-6:
    desc: server-6 desc
    user: test
    host: 172.24.2.11
    bastions: ['172.24.2.98', '172.24.2.99']
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, bastion]
    work_dir: /tmp
    env:
      hello: world

  server-9:
    desc: server-9 desc
    user: test
    host: 172.24.2.10
    bastions: [sake-bastion]
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, bastion]
    work_dir: /tmp
    env:
      hello: world

  server-10:
    desc: server-10 desc
    user: test
    host: sake-r
    # host: test@172.24.2.10:22
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, bastion]
    work_dir: /tmp
    env:
      hello: world

  server-11:
    desc: server-11 desc
    host: sake-rr
    user: test
    identity_file: ../keys/id_ed25519_pem
    password: testing
    tags: [remote, bastion]
    work_dir: /tmp

  ip6-1:
    desc: ip6-1 desc
    host: test@[2001:3984:3989::10]:22
    user: test
    password: test
    tags: [remote, reachable]

  ip6-2:
    desc: ip6-2 desc
    host: 2001:3984:3989::11
    port: 33
    user: test
    password: test
    tags: [remote, reachable]

targets:
  all:
    desc: Select all
    all: true

  limit:
    all: true
    limit: 3

  limit_p:
    all: true
    limit: 50

  list:
    servers: [list]

  regex:
    regex: 192

  servers:
    servers: [server-1, server-2]

  tags:
    tags: [remote, reachable]

  mult:
    desc: Info
    all: true
    regex: 192
    servers: [server-1, range]
    tags: [remote]
    limit: 3

specs:
  default:
    output: json

  table:
    output: table
    # describe: true
    silent: true

  text:
    output: text

  info:
    desc: Info
    output: table
    ignore_errors: true
    ignore_unreachable: true
    any_errors_fatal: false

  linear:
    desc: Linear
    strategy: linear
    # forks: 2
    batch: 2
    # batch_p: 50
    output: text
    ignore_errors: true
    ignore_unreachable: false
    any_errors_fatal: true
    # max_fail_percentage: 60
    report: [recap]

  host_pinned:
    desc: Host Pinned
    strategy: host_pinned
    order: sorted
    # forks: 2
    batch: 2
    # batch_p: 50
    output: text
    ignore_errors: true
    ignore_unreachable: true
    # any_errors_fatal: false
    max_fail_percentage: 60
    report: [recap]

  free:
    desc: Free
    strategy: free
    batch: 2
    # forks: 2
    output: text
    ignore_errors: false
    ignore_unreachable: true
    # any_errors_fatal: true
    max_fail_percentage: 60

env:
  VERSION: v0.1.0
  DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")

tasks:
  hello:
    name: Hi
    cmd: echo PONG

  kaka:
    name: KAKA
    desc: KAKA DESC
    cmd: echo 23

  ping:
    target: all
    # spec: host_pinned
    name: hej
    desc: foo
    spec:
      print: all
      ignore_errors: true
      # strategy: free
    # desc: ping server
    cmd: echo $S_BASTION
    # tty: true
    # tasks:
    #   - cmd: |
    #       ps -p $$
    #   - cmd: pwd

  exit:
    # name: Exit
    local: true
    cmd: exit 3

  sleep:
    desc: sleep for x seconds
    env:
      seconds: 2
    cmd: sleep $seconds & echo done

  info:
    name: Info
    desc: print info
    target: all
    tasks:
      - task: print-host
      - task: print-hostname
      - task: print-os
      - task: print-kernel

  # Info
  print-host:
    name: Host
    desc: print host
    spec: info
    target: all
    cmd: echo $S_HOST

  print-hostname:
    name: Hostname
    desc: print hostname
    spec: info
    target: all
    cmd: hostname

  print-os:
    name: OS
    desc: print OS
    spec: info
    target: all
    cmd: |
      os=$(lsb_release -si)
      release=$(lsb_release -sr)
      echo "$os $release"

  print-kernel:
    name: Kernel
    desc: Print kernel version
    spec: info
    target: all
    cmd: uname -r | awk -v FS='-' '{print $1}'

  register:
    tasks:
      - cmd: echo "foo" && >&2 echo "error"
        register: out
      - cmd: |
          echo "status: $out_status"
          echo "rc: $out_rc"
          echo "failed: $out_failed"
          echo "stdout: $out_stdout"
          echo "stderr: $out_stderr"
          echo "out: $out"

      - cmd: echo "xyz" && >&2 echo "error 2"
        register: out2
      - cmd: |
          echo "status: $out_status"
          echo "rc: $out_rc"
          echo "failed: $out_failed"
          echo "stdout: $out_stdout"
          echo "stderr: $out_stderr"
          echo "out: $out"

          echo "-------------"

          echo "status: $out2_status"
          echo "rc: $out2_rc"
          echo "failed: $out2_failed"
          echo "stdout: $out2_stdout"
          echo "stderr: $out2_stderr"
          echo "out: $out2"

  register2:
    tasks:
      - cmd: echo "foo" && >&2 echo "error"
        register: out
