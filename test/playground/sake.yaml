known_hosts_file: known_hosts

servers:
  localhost:
    desc: localhost
    host: localhost
    local: true
    tags: [local]
    work_dir: /opt

  server-1:
    desc: hosts mealie, node-red
    host: 172.24.2.2
    tags: [remote, pi]
    work_dir: /home/samir

  pihole:
    desc: runs pihole
    host: 172.24.2.3
    tags: [remote, pi]

  ip6:
    desc: server-9
    host: 2001:3984:3989::10
    tags: [remote,reachable]
    user: test
    password: test

targets:
  all:
    all: true

specs:
  table:
    output: table

  text:
    output: text

  info:
      output: table
      parallel: true
      ignore_errors: true
      ignore_unreachable: true
      any_errors_fatal: false

env:
  VERSION: v0.1.0
  DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")

tasks:
  ping:
    target: all
    desc: ping server
    cmd: echo pong

  # Info
  print-host:
    name: Host
    desc: print host
    spec: info
    target: all
    cmd: echo $SAKE_SERVER_HOST

  print-hostname:
    name: Hostname
    desc: print hostname
    spec: info
    target: all
    cmd: hostname

  print-os:
    name: OS
    desc: print OS
    spec: info
    target: all
    cmd: |
      os=$(lsb_release -si)
      release=$(lsb_release -sr)
      echo "$os $release"

  print-kernel:
    name: Kernel
    desc: Print kernel version
    spec: info
    target: all
    cmd: uname -r | awk -v FS='-' '{print $1}'

  print-mem:
    name: Memory
    desc: print memory stats
    spec: info
    target: all
    cmd: |
      mem_tot=$(awk '$1 == "MemTotal:" { print $2 / 1024 / 1024 }' /proc/meminfo)
      mem_tot=$(printf "%.1f" $mem_tot)

      mem_free=$(awk '$1 == "MemAvailable:" { print $2 / 1024 / 1024 }' /proc/meminfo)
      mem_free=$(printf "%.1f" $mem_free)
      mem_used=$(echo "$mem_tot-$mem_free" | bc)

      echo "$mem_used / $mem_tot Gb"

  print-cpu:
    name: CPU
    desc: print memory stats
    spec: info
    target: all
    cmd: |
      num_cores=$(nproc --all)
      cpu_load=$(mpstat 1 2 | awk 'END{print 100-$NF"%"}')
      echo "$cpu_load, ($num_cores cores)"

  print-disk:
    name: Disk
    desc: print disk usage
    spec: info
    target: all
    cmd: |
      disk=$(/usr/bin/df -BG 2>/dev/null | tail -n +2 | sort -h -k2,2 -r | awk -F " " '{print $1, $2, $3}' | head -n 1)

      tot_disk=$(echo $disk | awk '{print $2}')
      used_disk=$(echo $disk | awk '{print $3}')

      echo "$used_disk / $tot_disk"

  print-uptime:
    name: Uptime
    desc: print uptime
    spec: info
    target: all
    cmd: uptime | grep -E -o "[0-9]* (day|days)"

  info:
    desc: get remote info
    spec: info
    target: all

    tasks:
      - task: print-os
      - task: print-kernel
      - task: print-disk
      - task: print-mem
      - task: print-cpu
      - task: print-uptime

  # SSH
  ssh-and-cmd:
    desc: run command and ssh to server after
    attach: true
    cmd: ls -alh

  ssh-tunnel:
    desc: create ssh tunnel
    tty: true
    env:
      local:
      remote:
    cmd: ssh $SAKE_SERVER_USER@$SAKER_SERVER_HOST -N -L $local:localhost:$remote

  # Script
  script:
    desc: run local script on remote server
    env:
      file: ""
    local: true
    cmd: |
      file=$(basename $file)
      temp_file="$(mktemp /tmp/$file.XXXXXXXXX -u)"
      rsync --compress --recursive --archive --update $file $SAKE_SERVER_HOST:$temp_file
      ssh $SAKE_SERVER_USER@$SAKE_SERVER_HOST "$temp_file"
      ssh $SAKE_SERVER_USER@$SAKE_SERVER_HOST "rm $temp_file"

  # Docker
  # docker-exec:
  #   desc: attach to docker container
  #   spec: info
  #   env:
  #     NAME: mealie
  #   tty: true
  #   cmd: ssh -t $SAKE_SERVER_USER@$SAKE_SERVER_HOST "docker exec -it $NAME bash"

  # Upload / Download
  upload:
    desc: upload file or directory
    spec: info
    env:
      src: ""
      dest: /tmp
    local: true
    cmd: rsync --recursive --verbose --archive --update $src $SAKE_SERVER_HOST:$dest

  download:
    desc: download file or directory
    spec: info
    env:
      src: ""
      dest: ""
    local: true
    cmd: rsync --recursive --verbose --archive --update $SAKE_SERVER_HOST:$src $dest

  docker-exec:
    desc: attach to docker container
    env:
      NAME: ""
    tty: true
    cmd: ssh -t $SAKE_SERVER_USER@$SAKE_SERVER_HOST "docker exec -it $NAME bash"

  attach-mealie:
    desc: attach to mealie
    env:
      NAME: "mealie"
    task: docker-exec

