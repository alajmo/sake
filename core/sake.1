.TH "SAKE" "1" "2023-01-04T23:00:29CET" "v0.14.0" "Sake Manual" "sake"
.SH NAME
sake - sake is a task runner for local and remote hosts

.SH SYNOPSIS
.B sake [command] [flags]

.SH DESCRIPTION
sake is a task runner for local and remote hosts.

You define servers and tasks in a sake.yaml config file and then run the tasks on the servers.


.SH OPTIONS
.TP
\fB-c, --config=""\fR
specify config
.TP
\fB-u, --user-config=""\fR
specify user config
.TP
\fB--ssh-config=""\fR
specify ssh config
.TP
\fB--no-color[=false]\fR
disable color
.TP
\fB-h, --help[=false]\fR
help for sake
.SH
COMMANDS
.TP
.B check
Validate config.

.TP
.B run <task> [flags]
Run tasks specified in a sake.yaml file.


.B Available Options:
.RS
.RS
.TP
\fB--dry-run[=false]\fR
print the task to see what will be executed
.TP
\fB--describe[=false]\fR
print task information
.TP
\fB--list-hosts[=false]\fR
print hosts that will be targetted
.TP
\fB-V, --verbose[=false]\fR
enable all diagnostics
.TP
\fB-S, --strategy=""\fR
set execution strategy [linear|host_pinned|free]
.TP
\fB-f, --forks=10000\fR
max number of concurrent processes
.TP
\fB-b, --batch=0\fR
set number of hosts to run in parallel
.TP
\fB-B, --batch-p=0\fR
set percentage of hosts to run in parallel [0-100]
.TP
\fB-a, --all[=false]\fR
target all hosts
.TP
\fB-v, --invert[=false]\fR
invert matching on hosts
.TP
\fB-r, --regex=""\fR
target hosts on host regex
.TP
\fB-s, --servers=[]\fR
target servers by names
.TP
\fB-t, --tags=[]\fR
target hosts by tags
.TP
\fB-T, --target=""\fR
target hosts by target name
.TP
\fB--order=""\fR
order hosts
.TP
\fB-l, --limit=0\fR
set limit of servers to target
.TP
\fB-L, --limit-p=0\fR
set percentage of servers to target [0-100]
.TP
\fB--ignore-unreachable[=false]\fR
ignore unreachable hosts
.TP
\fB-M, --max-fail-percentage=0\fR
stop task execution on all servers when threshold reached
.TP
\fB--any-errors-fatal[=false]\fR
stop task execution on all servers on error
.TP
\fB--ignore-errors[=false]\fR
continue task execution on errors
.TP
\fB-J, --spec=""\fR
set spec
.TP
\fB-o, --output=""\fR
set task output [text|table|table-2|table-3|table-4|html|markdown|json|csv|none]
.TP
\fB-p, --print=""\fR
set print [all|stdout|stderr]
.TP
\fB--omit-empty-rows[=false]\fR
omit empty row for table output
.TP
\fB--omit-empty-columns[=false]\fR
omit empty column for table output
.TP
\fB-q, --silent[=false]\fR
omit showing loader when running tasks
.TP
\fB--confirm[=false]\fR
confirm root task before running
.TP
\fB--step[=false]\fR
confirm each task before running
.TP
\fB--tty[=false]\fR
replace the current process
.TP
\fB--attach[=false]\fR
ssh to server after command
.TP
\fB--local[=false]\fR
run task on localhost
.TP
\fB--theme="default"\fR
set theme
.TP
\fB-e, --edit[=false]\fR
edit task
.TP
\fB-R, --report=[recap]\fR
reports to show
.TP
\fB-i, --identity-file=""\fR
set identity file
.TP
\fB-U, --user=""\fR
set ssh user
.TP
\fB--password=""\fR
set ssh password
.TP
\fB--known-hosts-file=""\fR
set known hosts file
.RE
.RE
.TP
.B exec <command> [flags]
Execute arbitrary commands.

Single quote your command if you don't want the
file globbing and environments variables expansion to take place
before the command gets executed in each directory.


.B Available Options:
.RS
.RS
.TP
\fB--dry-run[=false]\fR
prints the command to see what will be executed
.TP
\fB--describe[=false]\fR
print task information
.TP
\fB--list-hosts[=false]\fR
print hosts that will be targetted
.TP
\fB-V, --verbose[=false]\fR
enable all diagnostics
.TP
\fB-S, --strategy=""\fR
set execution strategy [linear|host_pinned|free]
.TP
\fB-f, --forks=10000\fR
max number of concurrent processes
.TP
\fB-b, --batch=0\fR
set number of hosts to run in parallel
.TP
\fB-B, --batch-p=0\fR
set percentage of servers to run in parallel [0-100]
.TP
\fB-a, --all[=false]\fR
target all servers
.TP
\fB-v, --invert[=false]\fR
invert matching on servers
.TP
\fB-r, --regex=""\fR
filter servers on host regex
.TP
\fB-s, --servers=[]\fR
target servers by names
.TP
\fB-t, --tags=[]\fR
target servers by tags
.TP
\fB-T, --target=""\fR
target servers by target name
.TP
\fB--order=""\fR
order hosts
.TP
\fB-l, --limit=0\fR
set limit of servers to target
.TP
\fB-L, --limit-p=0\fR
set percentage of servers to target
.TP
\fB--ignore-unreachable[=false]\fR
ignore unreachable hosts
.TP
\fB-M, --max-fail-percentage=0\fR
stop task execution on all servers when threshold reached
.TP
\fB--any-errors-fatal[=false]\fR
stop task execution on all servers on error
.TP
\fB--ignore-errors[=false]\fR
continue task execution on errors
.TP
\fB-J, --spec=""\fR
set spec
.TP
\fB-o, --output=""\fR
set task output [text|table|table-2|table-3|table-4|html|markdown|json|csv|none]
.TP
\fB-p, --print=""\fR
set print [all|stdout|stderr]
.TP
\fB--omit-empty-rows[=false]\fR
omit empty row for table output
.TP
\fB--omit-empty-columns[=false]\fR
omit empty column for table output
.TP
\fB-q, --silent[=false]\fR
omit showing loader when running tasks
.TP
\fB--confirm[=false]\fR
confirm root task before running
.TP
\fB--step[=false]\fR
confirm each task before running
.TP
\fB--tty[=false]\fR
replace the current process
.TP
\fB--attach[=false]\fR
ssh to server after command
.TP
\fB--local[=false]\fR
run command on localhost
.TP
\fB--theme="default"\fR
set theme
.TP
\fB-R, --report=[recap]\fR
reports to show
.TP
\fB-i, --identity-file=""\fR
set identity file for all servers
.TP
\fB-U, --user=""\fR
set ssh user
.TP
\fB--password=""\fR
set ssh password for all servers
.TP
\fB--known-hosts-file=""\fR
set known hosts file
.RE
.RE
.TP
.B init [flags]
Initialize sake in the current directory.

.TP
.B edit [flags]
Open up sake config file in $EDITOR.

.TP
.B edit server [server]
Open up sake config file in $EDITOR and go to servers section.

.TP
.B edit task [task]
Open up sake config file in $EDITOR and go to tasks section.

.TP
.B edit target [target]
Open up sake config file in $EDITOR and go to targets section.

.TP
.B edit spec [spec]
Open up sake config file in $EDITOR and go to specs section.

.TP
.B list servers [servers] [flags]
List servers.


.B Available Options:
.RS
.RS
.TP
\fB-v, --invert[=false]\fR
invert matching on servers
.TP
\fB-r, --regex=""\fR
filter servers on host regex
.TP
\fB-t, --tags=[]\fR
filter servers by tags
.TP
\fB-H, --all-headers[=false]\fR
select all server headers
.TP
\fB--headers=[server,host,tags,desc]\fR
set headers
.TP
\fB-o, --output="table"\fR
set table output [table|table-2|table-3|table-4|html|markdown|json|csv]
.TP
\fB--theme="default"\fR
set theme

.RE
.RE
.TP
.B list tasks [tasks] [flags]
List tasks.


.B Available Options:
.RS
.RS
.TP
\fB-H, --all-headers[=false]\fR
select all task headers
.TP
\fB--headers=[task,desc]\fR
set headers
.TP
\fB-o, --output="table"\fR
set table output [table|table-2|table-3|table-4|html|markdown|json|csv]
.TP
\fB--theme="default"\fR
set theme

.RE
.RE
.TP
.B list tags [tags] [flags]
List tags.


.B Available Options:
.RS
.RS
.TP
\fB--headers=[tag,server]\fR
set headers
.TP
\fB-o, --output="table"\fR
set table output [table|table-2|table-3|table-4|html|markdown|json|csv]
.TP
\fB--theme="default"\fR
set theme

.RE
.RE
.TP
.B list targets [targets] [flags]
List targets.


.B Available Options:
.RS
.RS
.TP
\fB--headers=[target,desc,all,servers,tags,regex,invert,limit,limit_p]\fR
set headers. Available headers: name, regex
.TP
\fB-o, --output="table"\fR
set table output [table|table-2|table-3|table-4|html|markdown|json|csv]
.TP
\fB--theme="default"\fR
set theme

.RE
.RE
.TP
.B list specs [specs] [flags]
List specs.


.B Available Options:
.RS
.RS
.TP
\fB--headers=[spec,desc,describe,list_hosts,order,silent,hidden,strategy,batch,batch_p,forks,output,print,any_errors_fatal,max_fail_percentage,ignore_errors,ignore_unreachable,omit_empty,report,verbose,confirm,step]\fR
set headers
.TP
\fB-o, --output="table"\fR
set table output [table|table-2|table-3|table-4|html|markdown|json|csv]
.TP
\fB--theme="default"\fR
set theme

.RE
.RE
.TP
.B describe servers [servers] [flags]
Describe servers.


.B Available Options:
.RS
.RS
.TP
\fB-t, --tags=[]\fR
filter servers by their tag
.TP
\fB-r, --regex=""\fR
filter servers on host regex
.TP
\fB-v, --invert[=false]\fR
invert matching on servers
.TP
\fB-e, --edit[=false]\fR
edit server
.RE
.RE
.TP
.B describe tasks [tasks] [flags]
Describe tasks.


.B Available Options:
.RS
.RS
.TP
\fB-e, --edit[=false]\fR
edit task
.RE
.RE
.TP
.B describe targets [targets] [flags]
Describe targets.


.B Available Options:
.RS
.RS
.TP
\fB-e, --edit[=false]\fR
edit target
.RE
.RE
.TP
.B describe specs [specs] [flags]
Describe specs.


.B Available Options:
.RS
.RS
.TP
\fB-e, --edit[=false]\fR
edit spec
.RE
.RE
.TP
.B ssh <server> [flags]
ssh to server.


.B Available Options:
.RS
.RS
.TP
\fB-i, --identity-file=""\fR
set identity file for all servers
.TP
\fB--password=""\fR
set ssh password for all servers
.RE
.RE
.TP
.B gen [flags]
Generate man page


.B Available Options:
.RS
.RS
.TP
\fB-d, --dir="./"\fR
directory to save manpage to
.RE
.RE
.SH CONFIG

The sake.yaml config is based on the following concepts:

.RS 2
.IP "\(bu" 2
\fBservers\fR are servers, local or remote, that have a host
.IP "\(bu" 2
\fBtasks\fR are shell commands that you write and then run for selected \fBservers\fR
.IP "\(bu" 2
\fBspecs\fR are configs that alter \fBtask\fR execution and output
.IP "\(bu" 2
\fBtargets\fR are configs that provide shorthand filtering of \fBservers\fR when executing tasks
.IP "\(bu" 2
\fBthemes\fR are used to modify the output of \fBsake\fR commands
.IP "" 0
.RE

\fBSpecs\fR, \fBtargets\fR and \fBthemes\fR come with a default setting that the user can override.

Check the files and environment section to see how the config file is loaded.

Below is a config file detailing all of the available options and their defaults.

.RS 4
 # Import servers/tasks/env/specs/themes/targets from other configs [optional]
 import:
   - ./some-dir/sake.yaml

 # Verify SSH host connections. Set this to true if you wish to circumvent verify host [optional]
 disable_verify_host: false

 # Set known_hosts_file path. Default is users ssh home directory [optional]
 # known_hosts_file: $HOME/.ssh/known_hosts

 # Set timeout for ssh connections in seconds
 # default_timeout: 20

 # Shell used for commands [optional]
 # If you use any other program than bash, zsh, sh, node, or python
 # then you have to provide the command flag if you want the command-line string evaluted
 # For instance: bash -c
 shell: bash

 # List of Servers
 servers:
   # Server name [required]
   media:
     # Server description [optional]
     desc: media server

     # Host [required]
     host: media.lan
     # one-line for setting user and port
     # host: samir@media.lan:22

     # Specify multiple hosts:
     # hosts:
     # - samir@192.168.0.1:22
     # - samir@l92.168.1.1:22

     # or use a host range generator
     # hosts: samir@192.168.[0:1].1:22

     # generate hosts by local command
     # inventory: echo samir@192.168.0.1:22 samir@192.168.1.1:22

     # Bastion [optional]
     bastion: samir@192.168.1.1:2222

     # User to connect as. It defaults to the current user [optional]
     user: samir

     # Port for ssh [optional]
     port: 22

     # Shell used for commands [optional]
     shell: bash

     # Run on localhost [optional]
     local: false

     # Set default working directory for task execution [optional]
     work_dir: ""

     # Set identity file. By default it will attempt to establish a connection using a SSH auth agent [optional]
     # sake respects users ssh config, so you can set auth credentials in the users ssh config
     identity_file: ./id_rsa

     # Set password. Accepts either a string or a shell command [optional]
     password: $(echo $MY_SECRET_PASSWORD)

     # List of tags [optional]
     tags: [remote]

     # List of server specific environment variables [optional]
     env:
       # Simple string value
       key: value

       # Shell command substitution (evaluated on localhost)
       date: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")

 # List of environment variables that are available to all tasks
 env:
   # Simple string value
   AUTHOR: "alajmo"

   # Shell command substitution (evaluated on localhost)
   DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")

 # List of themes
 themes:
   # Theme name
   default:
     # Text options [optional]
     text:
       # Set host prefix for each line [optional]
       # Available variables: `.Name`, `.Index`, `.Host`, `.Port`, `.User`
       prefix: '{{ .Host }}'

       # Colors to alternate between for each server prefix [optional]
       # Available options: green, blue, red, yellow, magenta, cyan
       prefix_colors: ["green", "blue", "red", "yellow", "magenta", "cyan"]

       # Customize the task header that is printed before each task when output is set to text (to opt out, set it to empty string) [optional]
       # Available variables: `.Name`, `.Desc`, `.Index`, `.NumTasks`
       # Available methods: `.Style`, which takes in 1 or more parameters, first is the string to be styled, and the rest are styling options
       # Available styling options:
       #   Colors (prefix with `fg_` for foreground, and `bg_` for background): black, red, green, yellow, blue, magenta, cyan, white, hi_black, hi_red, hi_green, hi_yellow, hi_blue, hi_magenta, hi_cyan, hi_white
       #   Attributes: normal, bold, faint, italic, underline crossed_out
       header: '{{ .Style "TASK" "bold" }}{{ if ne .NumTasks 1 }} ({{ .Index }}/{{ .NumTasks }}){{end}}{{ if and .Name .Desc }} [{{.Style .Name "bold"}}: {{ .Desc }}] {{ else if .Name }} [{{ .Name }}] {{ else if .Desc }} [{{ .Desc }}] {{end}}'

       # Fill remaining spaces with a character after the header, if set to empty string, no filler characters will be displayed [optional]
       header_filler: "*"

     # Table options [optional]
     table:
       # Table style [optional]
       # Available options: ascii, connected-light
       style: ascii

       # Set host prefix [optional]
       # Available variables: `.Name`, `.Index`, `.Host`, `.Port`, `.User`
       prefix: '{{ .Host }}'

       # Border options for table output [optional]
       options:
         draw_border: false
         separate_columns: true
         separate_header: true
         separate_rows: false
         separate_footer: false

       # Color, attr, align, and format options [optional]
       # Available options for fg/bg: green, blue, red, yellow, magenta, cyan, hi_green, hi_blue, hi_red, hi_yellow, hi_magenta, hi_cyan
       # Available options for align: left, center, justify, right
       # Available options for attr: normal, bold, faint, italic, underline, crossed_out
       # Available options for format: default, lower, title, upper
       title:
         fg:
         bg:
         align:
         attr:
         format:

       header:
         fg:
         bg:
         align:
         attr:
         format:

       row:
         fg:
         bg:
         align:
         attr:
         format:

       footer:
         fg:
         bg:
         align:
         attr:
         format:

       border:
         header:
           fg:
           bg:
           attr:

         row:
           fg:
           bg:
           attr:

         row_alt:
           fg:
           bg:
           attr:

         footer:
           fg:
           bg:
           attr:

 # List of Specs [optional]
 specs:
   default:
     # Spec description
     desc: default spec

     # Print task description
     describe: false

     # Print list of hosts that will be targetted
     list_hosts: false

     # Order hosts [inventory|reverse_inventory|sorted|reverse_sorted|random]
     order: inventory

     # Omit showing loader when running tasks
     silent: false

     # Execution strategy [linear|host_pinned|free]
     strategy: linear

     # Number of hosts to run in parallel
     batch: 1

     # Number of hosts in percentage to run in parallel [0-100]
     # batch_p: 100

     # Max number of forks
     forks: 10000

     # Set task output [text|table|table-2|table-3|table-4|html|markdown|json|csv|none]
     output: text

     # Limit output [stdout|stderr|all]
     print: all

     # Hide task from auto-completion
     hidden: false

     # Continue task execution on errors
     ignore_errors: true

     # Stop task execution on any error
     any_errors_fatal: false

     # Max number of tasks to fail before aborting
     max_fail_percentage: 100

     # Ignore unreachable hosts
     ignore_unreachable: false

     # Omit empty rows for table output
     omit_empty_rows: false

     # Omit empty columns for table output
     omit_empty_columns: false

     # Show task reports [recap|rc|task|time|all]
     report: [recap]

     # Verbose turns on describe, list_hosts and report set to all
     verbose: false

     # Confirm invoked task before running
     confirm: false

     # Confirm each task before running
     step: false

 # List of targets [optional]
 targets:
   default:
     # Target description
     desc: ""

     # Target all hosts
     all: false

     # Specify hosts via server name
     servers: []

     # Specify hosts via server tags
     tags: []

     # Limit number of hosts to target
     limit: 0

     # Limit number of hosts to target in percentage
     limit_p: 100

     # Invert matching on hosts
     invert: false

     # Specify host regex
     regex: ""

 # List of tasks
 tasks:
   # Command ID [required]
   simple-1:
     # The name that will be displayed when executing or listing tasks. Defaults to task ID [optional]
     name: Simple

     # Script to run
     cmd: |
       echo "hello world"
     desc: simple command 1

   # Short-form for a command
   simple-2: echo "hello world"

   # Command ID [required]
   advanced-command:
     # The name that will be displayed when executing or listing tasks. Defaults to task ID [optional]
     name: Advanced Command

     # Task description [optional]
     desc: Advanced task

     # Specify theme [optional]
     theme: default

     # Spec reference [optional]
     # spec: default

     # Or specify specs inline
     spec:
       output: table
       ignore_errors: true
       ignore_unreachable: true
       any_errors_fatal: false
       omit_empty_rows: true
       omit_empty_columns: true

     # Target reference [optional]
     # target: default

     # Or specify targets inline
     target:
       all: true
       servers: [media]
       tags: [remote]
       limit: 1

     # List of environment variables [optional]
     env:
       # Simple string value
       release: v1.0.0

       # Shell command substitution
       num_lines: $(ls -1 | wc -l)

       # The following variables are available by default:
       #   S_NAME
       #   S_HOST
       #   S_USER
       #   S_PORT
       #   S_BASTION
       #   S_TAGS
       #   S_IDENTITY
       #   SAKE_DIR
       #   SAKE_PATH

     # Run on localhost [optional]
     local: false

     # Set default working directory for task [optional]
     work_dir: ""

     # Shell used for commands [optional]
     shell: bash

     # Each task can only define:
     # - a single cmd
     # - or a single task reference
     # - or a list of task references and commands

     # Single command
     cmd: |
       echo complex
       echo command

     # Task reference. work_dir and env variables are passed down
     task: simple-1

     # List of task references or commands
     tasks:
       # Command
       - name: inline-command
         cmd: echo "Hello World"
         ignore_errors: true
         work_dir: /tmp
         shell: bash
         env:
           foo: bar

       # Task reference. work_dir and env variables are passed down.
       # Nested task referencing is supported and will result in a
       # flat list of commands
       - task: simple-1
         ignore_errors: true
         work_dir: /tmp
         register: results
         env:
           foo: bar

       - name: output
         cmd: echo $results_stdout
.RE

.SH EXAMPLES

.TP
Initialize sake
.B ~ $ sake init

.nf
Initialized sake in /tmp
- Created sake.yaml

Following servers were added to sake.yaml

 Server    | Host
-----------+---------
 localhost | 0.0.0.0
.fi

.TP
List all servers
.B ~ $ sake list servers

.nf
 Server    | Host
-----------+---------
 localhost | 0.0.0.0
.fi

.TP
List all tasks
.B ~ $ sake list tasks

.nf
 Task | Description
------+-------------
 ping | Pong
.fi

.TP
Describe a task
.B ~ $ sake describe task ping

.nf
name: ping
desc: ping server
local: false
work_dir:
theme: default
target:
    all: true
spec:
    output: text
    ignore_unreachable: true
    omit_empty_rows: true
    omit_empty_columns: true
cmd:
    echo pong
.fi

.TP
Run a task for all servers with tag 'local'
.B ~ $ sake run many --tags local

.nf
TASK [ping: Pong] ********************

0.0.0.0 | pong
.fi

.TP
Run ad-hoc command for all servers
.B ~ $ sake exec --all --output table 'echo 123'

.nf
 Server    | Output
-----------+--------
 localhost | 123
.fi

.SH FILES

When running a command,
.B sake
will check the current directory and all parent directories for the following files: sake.yaml, sake.yml, .sake.yaml, .sake.yml.

Additionally, it will import (if found) a config file from:

.RS 2
.IP "\(bu" 2
Linux: \fB$XDG_CONFIG_HOME/sake/config.yaml\fR or \fB$HOME/.config/sake/config.yaml\fR if \fB$XDG_CONFIG_HOME\fR is not set.
.IP "\(bu" 2
Darwin: \fB$HOME/Library/Application/sake\fR
.RE

Both the config and user config can be specified via flags or environments variables.

.SH
ENVIRONMENT

.TP
.B SAKE_CONFIG
Override config file path

.TP
.B SAKE_USER_CONFIG
Override user config file path

.TP
.B SAKE_SSH_CONFIG
Override ssh config file path

.TP
.B SAKE_KNOWN_HOSTS_FILE
Override known_hosts file path

.TP
.B NO_COLOR
If this env variable is set (regardless of value) then all colors will be disabled

.SH BUGS

See GitHub Issues:
.UR https://github.com/alajmo/sake/issues
.ME .

.SH AUTHOR

.B sake
was written by Samir Alajmovic
.MT alajmovic.samir@gmail.com
.ME .
For updates and more information go to
.UR https://\:www.sakecli.com
sakecli.com
.UE .
