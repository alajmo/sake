"use strict";(self.webpackChunksake=self.webpackChunksake||[]).push([[386],{6618:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});var r=s(5893),i=s(1151);const a={},l="Variables",t={id:"variables",title:"Variables",description:"sake supports setting variables for both servers and tasks. The variable can either be a string or a command (in which case it's encapsulated by $()) which will be evaluated (once) for each task.",source:"@site/../../sake/docs/variables.md",sourceDirName:".",slug:"/variables",permalink:"/variables",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Error Handling",permalink:"/error-handling"},next:{title:"Working Directory",permalink:"/work-dir"}},c={},o=[{value:"Pass Variables from CLI",id:"pass-variables-from-cli",level:2},{value:"Register Variables in Tasks",id:"register-variables-in-tasks",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"variables",children:"Variables"}),"\n",(0,r.jsxs)(n.p,{children:["sake supports setting variables for both servers and tasks. The variable can either be a string or a command (in which case it's encapsulated by ",(0,r.jsx)(n.code,{children:"$()"}),") which will be evaluated (once) for each task."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'servers:\n  webserver:\n    host: 172.1.2.3\n    env:\n      string: hello world\n\ntasks:\n  ping:\n    cmd: echo "$msg"\n    env:\n      msg: pong\n      date: $(date)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Additionally, the following environment variables are available by default for all tasks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Server specific:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"S_NAME"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"S_HOST"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"S_USER"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"S_PORT"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"S_TAGS"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Config specific:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SAKE_DIR"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SAKE_PATH"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SAKE_KNOWN_HOSTS_FILE"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pass-variables-from-cli",children:"Pass Variables from CLI"}),"\n",(0,r.jsx)(n.p,{children:"To pass variables from the CLI prompt, simply pass an argument, for instance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sake run msg option=123\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now the environment variable ",(0,r.jsx)(n.code,{children:"option"})," can be used in the task."]}),"\n",(0,r.jsx)(n.h2,{id:"register-variables-in-tasks",children:"Register Variables in Tasks"}),"\n",(0,r.jsx)(n.p,{children:"To access a previous tasks output, you can register a variable in the previous task, which will be available as an environment variable in the current task. In addition to just capturing output, the following environment variables will be available:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<name>_status"}),":"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<name>_rc"}),":"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<name>_failed"}),":"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<name>_stdout"}),":"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<name>_stderr"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tasks:\n  ping:\n    tasks:\n      - cmd: echo "foo" && >&2 echo "error"\n        register: out\n\n      - cmd: |\n          echo "status: $out_status"\n          echo "rc: $out_rc"\n          echo "failed: $out_failed"\n          echo "stdout: $out_stdout"\n          echo "stderr: $out_stderr"\n          echo "out:"\n          echo "$out"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ sake run ping\n\nTASKS ******************************\n\nTASK (1/2) [task-0] ****************\n\n172.24.2.2 | error\n172.24.2.2 | foo\n\nTASK (2/2) [task-1] ****************\n\n172.24.2.2 | status: ok\n172.24.2.2 | rc: 0\n172.24.2.2 | failed: false\n172.24.2.2 | stdout: foo\n172.24.2.2 | stderr: error\n172.24.2.2 | out:\n172.24.2.2 | error\n172.24.2.2 | foo\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>l});var r=s(7294);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);