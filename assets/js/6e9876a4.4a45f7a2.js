"use strict";(self.webpackChunksake=self.webpackChunksake||[]).push([[561],{26:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=e(5893),o=e(1151);const r={},a="Output",i={id:"output",title:"Output",description:"sake supports different output formats for tasks. By default it will use text output, but it's possible to change this via the --output flag or specify it in the task spec.",source:"@site/../../sake/docs/output.md",sourceDirName:".",slug:"/output",permalink:"/output",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Working Directory",permalink:"/work-dir"},next:{title:"Background",permalink:"/background"}},l={},d=[{value:"Omit Empty Table Rows and Columns",id:"omit-empty-table-rows-and-columns",level:2},{value:"Print Reports",id:"print-reports",level:2}];function c(n){const s={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"output",children:"Output"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"sake"})," supports different output formats for tasks. By default it will use ",(0,t.jsx)(s.code,{children:"text"})," output, but it's possible to change this via the ",(0,t.jsx)(s.code,{children:"--output"})," flag or specify it in the task ",(0,t.jsx)(s.code,{children:"spec"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"The following output formats are available:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"text"})," (default), use this when you want streamed output to terminal","\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"TASK (1/2) [task-0] ***********\n\n172.24.2.2 | ping\n172.24.2.2 | ping\n\nTASK (2/2) [task-1] ***********\n\n172.24.2.2 | pong\n172.24.2.2 | pong\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"table"}),", useful when you have many hosts but few tasks","\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:" Host       | Task-0 | Task-1\n------------+--------+--------\n 172.24.2.2 | ping   | pong\n------------+--------+--------\n 172.24.2.2 | ping   | pong\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"table-2"}),", useful when you have many tasks but few hosts","\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:" Task   | 172.24.2.2 | 172.24.2.2\n--------+------------+------------\n task-0 | ping       | ping\n--------+------------+------------\n task-1 | pong       | pong\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"table-3"}),", useful when you want separate tables per host","\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"    172.24.2.2\n\n Task-0 | Task-1\n--------+--------\n ping   | pong\n\n    172.24.2.2\n\n Task-0 | Task-1\n--------+--------\n ping   | pong\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"table-4"}),", useful when you have many hosts and many tasks","\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:" Task   | 172.24.2.2\n--------+------------\n task-0 | ping\n--------+------------\n task-1 | pong\n\n Task   | 172.24.2.2\n--------+------------\n task-0 | ping\n--------+------------\n task-1 | pong\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"html"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-html",children:'<table class="">\n  <thead>\n  <tr>\n    <th align="left">host</th>\n    <th align="left">task-0</th>\n    <th align="left">task-1</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td align="left">172.24.2.2</td>\n    <td align="left">ping</td>\n    <td align="left">pong</td>\n  </tr>\n  <tr>\n    <td align="left">172.24.2.2</td>\n    <td align="left">ping</td>\n    <td align="left">pong</td>\n  </tr>\n  </tbody>\n</table>\n'})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"markdown"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-markdown",children:"| host | task-0 | task-1 |\n|:--- |:--- |:--- |\n| 172.24.2.2 | ping | pong |\n| 172.24.2.2 | ping | pong |\n|  |  |  |\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"json"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'[\n  {\n    "host": "172.24.2.2",\n    "task-0": "ping",\n    "task-1": "pong"\n  },\n  {\n    "host": "172.24.2.2",\n    "task-0": "ping",\n    "task-1": "pong"\n  }\n]\n'})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"csv"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csv",children:"host,task-0,task-1\n172.24.2.2,ping,pong\n172.24.2.2,ping,pong\n"})}),"\n"]}),"\n",(0,t.jsx)(s.li,{children:"none"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"omit-empty-table-rows-and-columns",children:"Omit Empty Table Rows and Columns"}),"\n",(0,t.jsxs)(s.p,{children:["If you wish to omit rows/columns that return empty outputs, you can do so via the ",(0,t.jsx)(s.code,{children:"--omit-empty-rows"}),"/",(0,t.jsx)(s.code,{children:"--omit-empty-columns"})," flag or specify it in the task ",(0,t.jsx)(s.code,{children:"spec"}),". Note, this only works for the tables, json, csv, markdown, and html."]}),"\n",(0,t.jsx)(s.p,{children:"See below for an example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"$ sake run empty -s server-3,server-4 -o table\n\nTASKS *******************************\n\n Host       | Task-0 | Task-1\n------------+--------+--------\n 172.24.2.4 | 123    |\n------------+--------+--------\n 172.24.2.5 |        |\n\n$ sake run empty -s server-3,server-4 -o table --omit-empty-rows --omit-empty-columns\n\nTASKS *******************************\n\n Host       | Task-0\n------------+--------\n 172.24.2.4 | 123\n"})}),"\n",(0,t.jsx)(s.h2,{id:"print-reports",children:"Print Reports"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"sake"})," comes with a few reports that gives you an overview of task execution:"]}),"\n",(0,t.jsx)(s.p,{children:"The available reports are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"recap"}),": show basic report (default)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"rc"}),": show return code for each host and task"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"task"}),": show task status for each host and task"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"time"}),": show time report for each host and task"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"all"}),": show available reports"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"$ sake run task --report=all\n\nTASKS **************************************************************************************\n\n Host       | Task-0                       | Task-1                       | Task-2\n------------+------------------------------+------------------------------+--------\n 172.24.2.2 | foo                          | bar                          | xyz\n------------+------------------------------+------------------------------+--------\n 172.24.2.2 |                              |                              |\n            | Process exited with status 1 | Process exited with status 1 |\n\nRETURN CODES *******************************************************************************\n\n host            task-0  task-1  task-2\n----------------------------------------\n 172.24.2.2      0       0       0\n 172.24.2.2      1       1\n\nTASK STATUS ********************************************************************************\n\n host            task-0   task-1  task-2\n------------------------------------------\n 172.24.2.2      ok       ok      ok\n 172.24.2.2      ignored  failed  skipped\n\nTIME ***************************************************************************************\n\n host            task-0  task-1  task-2  Total\n------------------------------------------------\n 172.24.2.2      0.09 s  0.01 s  0.01 s  0.10 s\n 172.24.2.2      0.08 s  0.01 s          0.09 s\n------------------------------------------------\n Total           0.17 s  0.02 s  0.01 s  0.20 s\n\nRECAP **************************************************************************************\n\n 172.24.2.2      ok=3  unreachable=0  ignored=0  failed=0  skipped=0\n 172.24.2.2      ok=0  unreachable=0  ignored=1  failed=1  skipped=1\n---------------------------------------------------------------------\n Total           ok=3  unreachable=0  ignored=1  failed=1  skipped=1\n"})})]})}function h(n={}){const{wrapper:s}={...(0,o.a)(),...n.components};return s?(0,t.jsx)(s,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},1151:(n,s,e)=>{e.d(s,{Z:()=>i,a:()=>a});var t=e(7294);const o={},r=t.createContext(o);function a(n){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function i(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),t.createElement(r.Provider,{value:s},n.children)}}}]);