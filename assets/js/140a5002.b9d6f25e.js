"use strict";(self.webpackChunksake=self.webpackChunksake||[]).push([[578],{78:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(5893),o=t(1151);const r={},a="Config Reference",i={id:"config-reference",title:"Config Reference",description:"The sake.yaml config is based on the following concepts:",source:"@site/../../sake/docs/config-reference.md",sourceDirName:".",slug:"/config-reference",permalink:"/config-reference",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Recipes",permalink:"/recipes"},next:{title:"Command Reference",permalink:"/command-reference"}},l={},c=[{value:"Files",id:"files",level:2},{value:"Environment",id:"environment",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"config-reference",children:"Config Reference"}),"\n",(0,s.jsx)(e.p,{children:"The sake.yaml config is based on the following concepts:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"servers"})," are servers, local or remote, that have a host"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"tasks"})," are shell commands that you write and then run for selected ",(0,s.jsx)(e.strong,{children:"servers"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"specs"})," are configs that alter ",(0,s.jsx)(e.strong,{children:"task"})," execution and output"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"targets"})," are configs that provide shorthand filtering of ",(0,s.jsx)(e.strong,{children:"servers"})," when executing ",(0,s.jsx)(e.strong,{children:"tasks"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"themes"})," are used to modify the output of ",(0,s.jsx)(e.code,{children:"sake"})," commands"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"env"})," are environment variables that can be defined globally, per server and per task"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Specs"}),", ",(0,s.jsx)(e.strong,{children:"targets"})," and ",(0,s.jsx)(e.strong,{children:"themes"})," come with a default setting that the user can override."]}),"\n",(0,s.jsxs)(e.p,{children:["Check the ",(0,s.jsx)(e.a,{href:"#files",children:"files"})," and ",(0,s.jsx)(e.a,{href:"#environment",children:"environment"})," section to see how the config file is loaded."]}),"\n",(0,s.jsx)(e.p,{children:"Below is a config file detailing all of the available options and their defaults."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Import servers/tasks/env/specs/themes/targets from other configs [optional]\nimport:\n - ./some-dir/sake.yaml\n\n# Verify SSH host connections. Set this to true if you wish to circumvent verify host [optional]\ndisable_verify_host: false\n\n# Set known_hosts_file path. Default is users ssh home directory [optional]\n# known_hosts_file: $HOME/.ssh/known_hosts\n\n# Set timeout for ssh connections in seconds\n# default_timeout: 20\n\n# Shell used for commands [optional]\n# If you use any other program than bash, zsh, sh, node, or python\n# then you have to provide the command flag if you want the command-line string evaluted\n# For instance: bash -c\nshell: bash\n\n# List of Servers\nservers:\n # Server name [required]\n media:\n   # Server description [optional]\n   desc: media server\n\n   # Host [required]\n   host: media.lan\n   # one-line for setting user and port\n   # host: samir@media.lan:22\n\n   # Specify multiple hosts:\n   # hosts:\n   # - samir@192.168.0.1:22\n   # - samir@l92.168.1.1:22\n\n   # or use a host range generator\n   # hosts: samir@192.168.[0:1].1:22\n\n   # generate hosts by local command\n   # inventory: echo samir@192.168.0.1:22 samir@192.168.1.1:22\n\n   # Bastion [optional]\n   bastion: samir@192.168.1.1:2222\n\n   # Bastions [optional]\n   # bastions: [samir@192.168.1.1:2222, samir@192.168.1.2:3333]\n\n   # User to connect as. It defaults to the current user [optional]\n   user: samir\n\n   # Port for ssh [optional]\n   port: 22\n\n   # Shell used for commands [optional]\n   shell: bash\n\n   # Run on localhost [optional]\n   local: false\n\n   # Set default working directory for task execution [optional]\n   work_dir: ""\n\n   # Set identity file. By default it will attempt to establish a connection using a SSH auth agent [optional]\n   # sake respects users ssh config, so you can set auth credentials in the users ssh config\n   identity_file: ./id_rsa\n\n   # Set password. Accepts either a string or a shell command [optional]\n   password: $(echo $MY_SECRET_PASSWORD)\n\n   # List of tags [optional]\n   tags: [remote]\n\n   # List of server specific environment variables [optional]\n   env:\n     # Simple string value\n     key: value\n\n     # Shell command substitution (evaluated on localhost)\n     date: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")\n\n# List of environment variables that are available to all tasks\nenv:\n # Simple string value\n AUTHOR: "alajmo"\n\n # Shell command substitution (evaluated on localhost)\n DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")\n\n# List of themes\nthemes:\n # Theme name\n default:\n   # Text options [optional]\n   text:\n     # Set host prefix for each line [optional]\n     # Available variables: `.Name`, `.Index`, `.Host`, `.Port`, `.User`\n     prefix: \'{{ .Host }}\'\n\n     # Colors to alternate between for each server prefix [optional]\n     # Available options: green, blue, red, yellow, magenta, cyan\n     prefix_colors: ["green", "blue", "red", "yellow", "magenta", "cyan"]\n\n     # Customize the task header that is printed before each task when output is set to text (to opt out, set it to empty string) [optional]\n     # Available variables: `.Name`, `.Desc`, `.Index`, `.NumTasks`\n     # Available methods: `.Style`, which takes in 1 or more parameters, first is the string to be styled, and the rest are styling options\n     # Available styling options:\n     #   Colors (prefix with `fg_` for foreground, and `bg_` for background): black, red, green, yellow, blue, magenta, cyan, white, hi_black, hi_red, hi_green, hi_yellow, hi_blue, hi_magenta, hi_cyan, hi_white\n     #   Attributes: normal, bold, faint, italic, underline crossed_out\n     header: \'{{ .Style "TASK" "bold" }}{{ if ne .NumTasks 1 }} ({{ .Index }}/{{ .NumTasks }}){{end}}{{ if and .Name .Desc }} [{{.Style .Name "bold"}}: {{ .Desc }}] {{ else if .Name }} [{{ .Name }}] {{ else if .Desc }} [{{ .Desc }}] {{end}}\'\n\n     # Fill remaining spaces with a character after the header, if set to empty string, no filler characters will be displayed [optional]\n     header_filler: "*"\n\n   # Table options [optional]\n   table:\n     # Table style [optional]\n     # Available options: ascii, connected-light\n     style: ascii\n\n     # Set host prefix [optional]\n     # Available variables: `.Name`, `.Index`, `.Host`, `.Port`, `.User`\n     prefix: \'{{ .Host }}\'\n\n     # Border options for table output [optional]\n     options:\n       draw_border: false\n       separate_columns: true\n       separate_header: true\n       separate_rows: false\n       separate_footer: false\n\n     # Color, attr, align, and format options [optional]\n     # Available options for fg/bg: green, blue, red, yellow, magenta, cyan, hi_green, hi_blue, hi_red, hi_yellow, hi_magenta, hi_cyan\n     # Available options for align: left, center, justify, right\n     # Available options for attr: normal, bold, faint, italic, underline, crossed_out\n     # Available options for format: default, lower, title, upper\n     title:\n       fg:\n       bg:\n       align:\n       attr:\n       format:\n\n     header:\n       fg:\n       bg:\n       align:\n       attr:\n       format:\n\n     row:\n       fg:\n       bg:\n       align:\n       attr:\n       format:\n\n     footer:\n       fg:\n       bg:\n       align:\n       attr:\n       format:\n\n     border:\n       header:\n         fg:\n         bg:\n         attr:\n\n       row:\n         fg:\n         bg:\n         attr:\n\n       row_alt:\n         fg:\n         bg:\n         attr:\n\n       footer:\n         fg:\n         bg:\n         attr:\n\n# List of Specs [optional]\nspecs:\n default:\n   # Spec description\n   desc: default spec\n\n   # Print task description\n   describe: false\n\n   # Print list of hosts that will be targetted\n   list_hosts: false\n\n   # Order hosts [inventory|reverse_inventory|sorted|reverse_sorted|random]\n   order: inventory\n\n   # Omit showing loader when running tasks\n   silent: false\n\n   # Execution strategy [linear|host_pinned|free]\n   strategy: linear\n\n   # Number of hosts to run in parallel\n   batch: 1\n\n   # Number of hosts in percentage to run in parallel [0-100]\n   # batch_p: 100\n\n   # Max number of forks\n   forks: 10000\n\n   # Set task output [text|table|table-2|table-3|table-4|html|markdown|json|csv|none]\n   output: text\n\n   # Limit output [stdout|stderr|all]\n   print: all\n\n   # Hide task from auto-completion\n   hidden: false\n\n   # Continue task execution on errors\n   ignore_errors: true\n\n   # Stop task execution on any error\n   any_errors_fatal: false\n\n   # Max number of tasks to fail before aborting\n   max_fail_percentage: 100\n\n   # Ignore unreachable hosts\n   ignore_unreachable: false\n\n   # Omit empty rows for table output\n   omit_empty_rows: false\n\n   # Omit empty columns for table output\n   omit_empty_columns: false\n\n   # Show task reports [recap|rc|task|time|all]\n   report: [recap]\n\n   # Verbose turns on describe, list_hosts and report set to all\n   verbose: false\n\n   # Confirm invoked task before running\n   confirm: false\n\n   # Confirm each task before running\n   step: false\n\n# List of targets [optional]\ntargets:\n default:\n   # Target description\n   desc: ""\n\n   # Target all hosts\n   all: false\n\n   # Specify hosts via server name\n   servers: []\n\n   # Specify hosts via server tags\n   tags: []\n\n   # Limit number of hosts to target\n   limit: 0\n\n   # Limit number of hosts to target in percentage\n   limit_p: 100\n\n   # Invert matching on hosts\n   invert: false\n\n   # Specify host regex\n   regex: ""\n\n# List of tasks\ntasks:\n # Command ID [required]\n simple-1:\n   # The name that will be displayed when executing or listing tasks. Defaults to task ID [optional]\n   name: Simple\n\n   # Script to run\n   cmd: |\n     echo "hello world"\n   desc: simple command 1\n\n # Short-form for a command\n simple-2: echo "hello world"\n\n # Command ID [required]\n advanced-command:\n   # The name that will be displayed when executing or listing tasks. Defaults to task ID [optional]\n   name: Advanced Command\n\n   # Task description [optional]\n   desc: Advanced task\n\n   # Specify theme [optional]\n   theme: default\n\n   # Spec reference [optional]\n   # spec: default\n\n   # Or specify specs inline\n   spec:\n     output: table\n     ignore_errors: true\n     ignore_unreachable: true\n     any_errors_fatal: false\n     omit_empty_rows: true\n     omit_empty_columns: true\n\n   # Target reference [optional]\n   # target: default\n\n   # Or specify targets inline\n   target:\n     all: true\n     servers: [media]\n     tags: [remote]\n     limit: 1\n\n   # List of environment variables [optional]\n   env:\n     # Simple string value\n     release: v1.0.0\n\n     # Shell command substitution\n     num_lines: $(ls -1 | wc -l)\n\n     # The following variables are available by default:\n     #   S_NAME\n     #   S_HOST\n     #   S_USER\n     #   S_PORT\n     #   S_BASTION\n     #   S_TAGS\n     #   S_IDENTITY\n     #   SAKE_DIR\n     #   SAKE_PATH\n\n   # Run on localhost [optional]\n   local: false\n\n   # Set default working directory for task [optional]\n   work_dir: ""\n\n   # Shell used for commands [optional]\n   shell: bash\n\n   # Each task can only define:\n   # - a single cmd\n   # - or a single task reference\n   # - or a list of task references and commands\n\n   # Single command\n   cmd: |\n     echo complex\n     echo command\n\n   # Task reference. work_dir and env variables are passed down\n   task: simple-1\n\n   # List of task references or commands\n   tasks:\n     # Command\n     - name: inline-command\n       cmd: echo "Hello World"\n       ignore_errors: true\n       work_dir: /tmp\n       shell: bash\n       env:\n         foo: bar\n\n     # Task reference. work_dir and env variables are passed down.\n     # Nested task referencing is supported and will result in a\n     # flat list of commands\n     - task: simple-1\n       ignore_errors: true\n       work_dir: /tmp\n       register: results\n       env:\n         foo: bar\n\n     - name: output\n       cmd: echo $results_stdout\n'})}),"\n",(0,s.jsx)(e.h2,{id:"files",children:"Files"}),"\n",(0,s.jsxs)(e.p,{children:["When running a command, ",(0,s.jsx)(e.code,{children:"sake"})," will check the current directory and all parent directories for the following files: ",(0,s.jsx)(e.code,{children:"sake.yaml"}),", ",(0,s.jsx)(e.code,{children:"sake.yml"}),", ",(0,s.jsx)(e.code,{children:".sake.yaml"}),", ",(0,s.jsx)(e.code,{children:".sake.yml"})," ."]}),"\n",(0,s.jsx)(e.p,{children:"Additionally, it will import (if found) a config file from:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Linux: ",(0,s.jsx)(e.code,{children:"$XDG_CONFIG_HOME/sake/config.yaml"})," or ",(0,s.jsx)(e.code,{children:"$HOME/.config/sake/config.yaml"})," if ",(0,s.jsx)(e.code,{children:"$XDG_CONFIG_HOME"})," is not set."]}),"\n",(0,s.jsxs)(e.li,{children:["Darwin: ",(0,s.jsx)(e.code,{children:"$HOME/Library/Application/sake"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Both the config and user config can be specified via flags or environments variables."}),"\n",(0,s.jsx)(e.h2,{id:"environment",children:"Environment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-txt",children:"SAKE_CONFIG\n    Override config file path\n\nSAKE_USER_CONFIG\n    Override user config file path\n\nSAKE_SSH_CONFIG\n    Override ssh config file path\n\nSAKE_KNOWN_HOSTS_FILE\n    Override known_hosts file path\n\nNO_COLOR\n    If this env variable is set (regardless of value) then all colors will be disabled\n"})})]})}function h(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>a});var s=t(7294);const o={},r=s.createContext(o);function a(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);