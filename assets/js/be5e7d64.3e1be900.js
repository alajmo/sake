"use strict";(self.webpackChunksake=self.webpackChunksake||[]).push([[700],{4094:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=s(5893),t=s(1151);const r={},o="Examples",l={id:"examples",title:"Examples",description:"This is an example of how you can use sake for localhost. If you wish to run commands against remote servers via ssh, add your own remote servers.",source:"@site/../../sake/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Usage",permalink:"/usage"},next:{title:"Recipes",permalink:"/recipes"}},i={},c=[{value:"Simple Example",id:"simple-example",level:2},{value:"Advanced Example",id:"advanced-example",level:2},{value:"Real World Example",id:"real-world-example",level:2},{value:"sake.yaml",id:"sakeyaml",level:3},{value:"common.yaml",id:"commonyaml",level:3},{value:"utils.yaml",id:"utilsyaml",level:3},{value:"install.yaml",id:"installyaml",level:3},{value:"docker-compose.yaml",id:"docker-composeyaml",level:3},{value:"Workflow",id:"workflow",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["This is an example of how you can use ",(0,a.jsx)(n.code,{children:"sake"})," for localhost. If you wish to run commands against remote servers via ",(0,a.jsx)(n.code,{children:"ssh"}),", add your own remote servers."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#simple-example",children:"Simple Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#advanced-example",children:"Advanced Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#real-world-example",children:"Real World Example"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"simple-example",children:"Simple Example"}),"\n",(0,a.jsx)(n.p,{children:"This is a simple example where we just define 1 server and a couple of tasks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=sake.yaml",children:'servers:\n  localhost:\n    desc: localhost\n    host: localhost\n    local: true\n    tags: [local]\n\ntasks:\n  ping:\n    desc: ping server\n    target:\n      all: true\n    cmd: echo pong\n\n  print-host:\n    name: Host\n    desc: print host\n    spec:\n      output: table\n    target:\n      all: true\n    cmd: echo $S_HOST\n\n  info:\n    desc: get remote info\n    target:\n      tags: [local]\n    spec:\n      output: table\n      ignore_errors: true\n\n    tasks:\n      - task: ping\n      - task: print-host\n      - cmd: echo "Done"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now let's run some commands:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# List all servers\n$ sake list servers\n\n Server    | Host      | Tag   | Description\n-----------+-----------+-------+-------------\n localhost | localhost | local | localhost\n\n# Describe task\n$ sake describe task print-host\n\ntask: print-host\nname: Host\ndesc: print host\ntheme: default\ntarget:\n    all: true\nspec:\n    output: table\ncmd:\n    echo $S_HOST\n\n\n# Run a task targeting servers with tag `local`\n$ sake run ping --tags local\n\nTASK ping: ping server ****************\n\nlocalhost | pong\n\n# Run task that has multiple commands\n$ sake run info --all\n\n Server    | Ping | Host      | Output\n-----------+------+-----------+--------\n localhost | pong | localhost | Done\n\n# Same task but with text output\n$ sake run info --all --output text\n\nTASK (1/3) ping: ping server **********\n\nlocalhost | pong\n\nTASK (2/3) Host: print host ***********\n\nlocalhost | localhost\n\nTASK (3/3) Command ********************\n\nlocalhost | Done\n\n# Run runtime defined command for all servers\n$ sake exec --all --output table --strategy=free 'cd ~ && ls -al | wc -l'\n\n Server    | Output\n-----------+--------\n localhost | 42\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-example",children:"Advanced Example"}),"\n",(0,a.jsxs)(n.p,{children:["This is a more advanced example where we introduce ",(0,a.jsx)(n.code,{children:"spec"}),", ",(0,a.jsx)(n.code,{children:"target"}),", ",(0,a.jsx)(n.code,{children:"imports"}),", and nested tasks."]}),"\n",(0,a.jsx)(n.p,{children:"Create the following files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 sake.yaml\n\u251c\u2500\u2500 servers.yaml\n\u2514\u2500\u2500 tasks.yaml\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=sake.yaml",children:'import:\n  - servers.yaml\n  - tasks.yaml\n\nenv:\n  DATE: $(date -u +"%Y-%m-%dT%H:%M:%S%Z")\n\ntasks:\n  ping:\n    desc: ping server\n    spec: info\n    target: all\n    cmd: echo pong\n\n  overview:\n    desc: get system overview\n    spec: info\n    target: all\n    tasks:\n      - name: date\n        cmd: echo $DATE\n\n      - name: pwd\n        cmd: pwd\n\n      - task: info\n      - task: print-uptime\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=servers.yaml",children:"servers:\n  localhost:\n    desc: localhost\n    host: localhost\n    local: true\n    work_dir: /tmp\n    tags: [local]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=tasks.yaml",children:"specs:\n  info:\n    output: table\n    ignore_errors: true\n    omit_empty_rows: true\n    omit_empty_columns: true\n    any_fatal_errors: false\n    ignore_unreachable: true\n    strategy: free\n\ntargets:\n  all:\n    all: true\n    tags: []\n    servers: []\n\ntasks:\n  print-uptime:\n    name: Uptime\n    desc: print uptime\n    spec: info\n    target: all\n    cmd: uptime | grep -E -o \"[0-9]* (day|days)\"\n\n  print-host:\n    name: Host\n    desc: print host\n    target: all\n    cmd: echo $S_HOST\n\n  print-hostname:\n    name: Hostname\n    desc: print hostname\n    spec: info\n    target: all\n    cmd: hostname\n\n  print-os:\n    name: OS\n    desc: print OS\n    spec: info\n    target: all\n    cmd: |\n      os=$(lsb_release -si)\n      release=$(lsb_release -sr)\n      echo \"$os $release\"\n\n  print-kernel:\n    name: Kernel\n    desc: Print kernel version\n    spec: info\n    target: all\n    cmd: uname -r | awk -v FS='-' '{print $1}'\n\n  info:\n    name: Info\n    desc: Print system info\n    tasks:\n      - task: print-host\n      - task: print-hostname\n      - task: print-os\n      - task: print-kernel\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And run ",(0,a.jsx)(n.code,{children:"sake run overview"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:" Server    | Date                   | Pwd  | Host      | Hostname | OS             | Kernel | Uptime\n-----------+------------------------+------+-----------+----------+----------------+--------+--------\n localhost | 2022-06-09T10:02:10UTC | /tmp | localhost | HAL-9000 | Debian testing | 5.16.0 | 9 days\n"})}),"\n",(0,a.jsx)(n.h2,{id:"real-world-example",children:"Real World Example"}),"\n",(0,a.jsx)(n.p,{children:"This is an example of how you can setup and manage a bunch of Raspberry Pi's."}),"\n",(0,a.jsx)(n.p,{children:"It contains the following workflows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Create tasks to setup Raspberry pi","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"clean home directory"}),"\n",(0,a.jsx)(n.li,{children:"create new directories"}),"\n",(0,a.jsx)(n.li,{children:"install some default packages"}),"\n",(0,a.jsx)(n.li,{children:"set default editor and hostname"}),"\n",(0,a.jsx)(n.li,{children:"disable swap"}),"\n",(0,a.jsx)(n.li,{children:"increase inotify"}),"\n",(0,a.jsx)(n.li,{children:"turn off wifi and bluetooth"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Install scripts for","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Docker, Docker Compose, and Pi-Hole"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Tasks that query for machine info (cpu, memory, Pi Version, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Tasks to upload files and run docker-compose commands"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Let's start by creating the following files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 sake.yaml           # base config\n\u251c\u2500\u2500 common.yaml         # tasks used across all servers\n\u251c\u2500\u2500 utils.yaml          # utility tasks\n\u251c\u2500\u2500 install.yaml        # install various software\n\u2514\u2500\u2500 docker-compose.yaml # Docker containers\n"})}),"\n",(0,a.jsx)(n.p,{children:"and populate them with the associated content."}),"\n",(0,a.jsx)(n.h3,{id:"sakeyaml",children:"sake.yaml"}),"\n",(0,a.jsx)(n.p,{children:"This is our base config which will be used everytime we run a command."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=sake.yaml",children:'import:\n  - common.yaml\n  - utils.yaml\n  - install.yaml\n\nservers:\n  server-1:\n    desc: server-1 hosts nodered, syncthing and mealie\n    host: server-1.lan\n    tags: [active, remote, pi, server]\n    env:\n      HOSTNAME: server-1\n\n  pihole:\n    desc: pihole and local DNS resolver\n    host: pihole.lan\n    tags: [active, remote, pi, pihole]\n    env:\n      HOSTNAME: pihole\n\ntargets:\n  all:\n    all: true\n\nspecs:\n  info:\n      output: table\n      strategy: free\n      ignore_errors: true\n      ignore_unreachable: true\n      any_errors_fatal: false\n\ntasks:\n  ping:\n    desc: print pong from server\n    target: all\n    cmd: echo pong\n\n  real-ping:\n    name: Ping for real\n    desc: ping server\n    target: all\n    local: true\n    cmd: ping $S_HOST -c 2\n\n  # Setup\n  setup-pi:\n    name: Setup pi\n    desc: update hostname, install common software, etc.\n    target: all\n    tasks:\n      - task: clean-home\n      - task: install-default-packages\n      - task: secure-pi\n      - task: disable-swap\n      - task: set-default-editor\n      - task: increase-inotify\n      - task: set-hostname\n\n  setup-pihole:\n    name: Setup Pi-hole\n    target:\n      tags: [pihole]\n    tasks:\n      - task: setup-pi\n      - task: install-pihole\n\n  setup-server:\n    name: Setup Server\n    target:\n      tags: [server]\n    tasks:\n      - task: setup-pi\n      - task: install-docker\n      - task: upload\n        name: upload docker compose config\n        env:\n          SRC: docker-compose.yaml\n          DEST: docker-compose.yaml\n\n  # Daily Dev\n\n  attach-mealie:\n    desc: attach to mealie\n    env:\n      NAME: "mealie"\n    task: docker-exec\n\n  attach-nodered:\n    desc: attach to nodered\n    env:\n      NAME: "nodered"\n    task: docker-exec\n\n  server-workflow:\n    desc: Upload docker-compose config and restart services\n    targets:\n      tags: [server]\n    tasks:\n      - task: upload\n        name: upload docker compose config\n        env:\n          SRC: docker-compose.yaml\n          DEST: docker-compose.yaml\n      - task: docker-start\n'})}),"\n",(0,a.jsx)(n.h3,{id:"commonyaml",children:"common.yaml"}),"\n",(0,a.jsx)(n.p,{children:"Common tasks used to setup Raspberry Pi's."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=common.yaml",children:"tasks:\n  clean-home:\n    name: Cleanup home\n    desc: Remove unused directories in home and create some defaults\n    cmd: |\n      cd ~\n      rm Bookshelf Desktop Documents Pictures Public Templates Music Downloads Videos -rf\n      mkdir -p downloads tmp sandbox\n\n  install-default-packages:\n    name: Install default packages\n    desc: install default packages\n    cmd: |\n      sudo apt-get update -y\n      sudo apt-get upgrade -y\n      sudo apt-get install sysstat vim vifm rfkill tree htop jq curl sqlite3 -y\n      sudo apt autoremove -y\n\n  secure-pi:\n    name: Secure PI\n    desc: secure pi, block wifi, bluetooth, etc.\n    cmd: |\n      sudo rfkill block wifi\n      sudo rfkill block bluetooth\n\n  set-default-editor:\n    name: Set default editor\n    desc: set default editor\n    cmd: |\n      sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1\n      sudo update-alternatives --set editor /usr/bin/vim\n\n  increase-inotify:\n    name: Increase inotify\n    desc: increase inotify watches, useful for syncthing\n    cmd: echo \"fs.inotify.max_user_watches=204800\" | sudo tee -a /etc/sysctl.conf\n\n  disable-swap:\n    name: Disable swap\n    desc: disable swap\n    cmd: sudo systemctl disable dphys-swapfile.service\n\n  set-hostname:\n    name: Set hostname\n    desc: sets the hostname\n    cmd: |\n      sudo hostnamectl set-hostname $HOSTNAME\n      sudo sed -i -r 's/raspberrypi/$HOSTNAME/' /etc/hosts\n"})}),"\n",(0,a.jsx)(n.h3,{id:"utilsyaml",children:"utils.yaml"}),"\n",(0,a.jsx)(n.p,{children:"Useful utility tasks that provide machine information (OS, Kernel, Pi Version, etc.), upload/download tasks, and docker-compose commands."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="utils.yaml"',children:'tasks:\n  print-host:\n    name: Host\n    desc: print host\n    spec: info\n    target: all\n    cmd: echo $S_HOST\n\n  print-hostname:\n    name: Hostname\n    desc: print hostname\n    spec: info\n    target: all\n    cmd: hostname\n\n  print-os:\n    name: OS\n    desc: print OS\n    spec: info\n    target: all\n    cmd: |\n      os=$(lsb_release -si)\n      release=$(lsb_release -sr)\n      echo "$os $release"\n\n  print-pi-version:\n    name: Pi\n    desc: print pi version\n    spec: info\n    target: all\n    cmd: cat /proc/device-tree/model\n\n  print-kernel:\n    name: Kernel\n    desc: Print kernel version\n    spec: info\n    target: all\n    cmd: uname -r | awk -v FS=\'-\' \'{print $1}\'\n\n  print-mem:\n    name: Memory\n    desc: print memory stats\n    spec: info\n    target: all\n    cmd: |\n      mem_tot=$(awk \'$1 == "MemTotal:" { print $2 / 1024 / 1024 }\' /proc/meminfo)\n      mem_tot=$(printf "%.1f" $mem_tot)\n\n      mem_free=$(awk \'$1 == "MemAvailable:" { print $2 / 1024 / 1024 }\' /proc/meminfo)\n      mem_free=$(printf "%.1f" $mem_free)\n      mem_used=$(echo "$mem_tot-$mem_free" | bc)\n\n      echo "$mem_used / $mem_tot Gb"\n\n  print-cpu:\n    name: CPU\n    desc: print memory stats\n    spec: info\n    target: all\n    cmd: |\n      num_cores=$(nproc --all)\n      cpu_load=$(mpstat 1 2 | awk \'END{print 100-$NF"%"}\')\n      echo "$cpu_load, ($num_cores cores)"\n\n  print-disk:\n    name: Disk\n    desc: print disk usage\n    spec: info\n    target: all\n    cmd: |\n      disk=$(/usr/bin/df -BG 2>/dev/null | tail -n +2 | sort -h -k2,2 -r | awk -F " " \'{print $1, $2, $3}\' | head -n 1)\n\n      tot_disk=$(echo $disk | awk \'{print $2}\')\n      used_disk=$(echo $disk | awk \'{print $3}\')\n\n      echo "$used_disk / $tot_disk"\n\n  print-uptime:\n    name: Uptime\n    desc: print uptime\n    spec: info\n    target: all\n    cmd: uptime | grep -E -o "[0-9]* (day|days)"\n\n  info:\n    desc: get remote info\n    spec: info\n    target: all\n\n    tasks:\n      - task: print-os\n      - task: print-pi-version\n      - task: print-kernel\n      - task: print-disk\n      - task: print-mem\n      - task: print-cpu\n      - task: print-uptime\n\n  # Upload\n\n  upload:\n    desc: upload file or directory\n    env:\n      SRC: ""\n      DEST: ""\n    local: true\n    cmd: rsync --recursive --verbose --archive --update $SRC $S_HOST:$DEST\n\n  # Docker\n\n  docker-exec:\n    desc: attach to docker container\n    env:\n      NAME: ""\n    tty: true\n    cmd: ssh -t $S_USER@$S_HOST "docker exec -it $NAME bash"\n\n  docker-start:\n    desc: create and start services\n    cmd: docker-compose up --detach\n\n  docker-stop:\n    desc: stop services\n    cmd: docker-compose stop\n\n  docker-pause:\n    desc: stop services\n    cmd: docker-compose pause\n\n  docker-unpause:\n    desc: stop services\n    cmd: docker-compose unpause\n'})}),"\n",(0,a.jsx)(n.h3,{id:"installyaml",children:"install.yaml"}),"\n",(0,a.jsxs)(n.p,{children:["Tasks to install ",(0,a.jsx)(n.code,{children:"Pi-hole"}),",",(0,a.jsx)(n.code,{children:"Docker"}),", and ",(0,a.jsx)(n.code,{children:"Docker Compose"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:"title=install.yaml",children:'tasks:\n  install-pihole:\n    name: Install pihole\n    desc: Install pihole\n    cmd: curl -sSL https://install.pi-hole.net | bash\n\n  install-docker:\n    name: Install Docker\n    desc: Install docker and docker-compose\n    env:\n      USER: samir\n    cmd: |\n      sudo apt-get remove docker docker.io containerd runc -y\n      sudo apt-get update -y\n      sudo apt-get install    \\\n                   apt-transport-https \\\n                   ca-certificates     \\\n                   curl                \\\n                   gnupg               \\\n                   lsb-release \\\n                   -y\n\n      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n      echo \\\n        "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\n        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n      sudo apt-get update -y\n      sudo apt-get install \\\n                   docker-ce \\\n                   docker-ce-cli \\\n                   containerd.io \\\n                   -y\n\n      # Install docker-compose\n      mkdir -p ~/.docker/cli-plugins \\\n        && wget https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-linux-aarch64 -O ~/.docker/cli-plugins/docker-compose \\\n        && chmod +x ~/.docker/cli-plugins/docker-compose\n\n      # Add USER user to docker group\n      sudo usermod -aG docker $USER\n'})}),"\n",(0,a.jsx)(n.h3,{id:"docker-composeyaml",children:"docker-compose.yaml"}),"\n",(0,a.jsxs)(n.p,{children:["This is a docker-compose file used to start multiple Docker containers. Currently three services are ran ",(0,a.jsx)(n.code,{children:"syncthing"}),", ",(0,a.jsx)(n.code,{children:"mealie"}),", and ",(0,a.jsx)(n.code,{children:"Node-RED"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'version: "3.9"\n\nservices:\n  syncthing:\n    image: syncthing/syncthing\n    container_name: syncthing\n    ports:\n      - 8384:8384\n      - 22000:22000/tcp\n      - 22000:22000/udp\n      - 21027:21027/udp\n\n    environment:\n      PUID: 1001\n      PGID: 1001\n      TZ: Europe/Stockholm\n\n    volumes:\n      - "./.config/syncthing:/var/syncthing"\n\n    restart: unless-stopped\n\n  node-red:\n    image: nodered/node-red:latest\n    container_name: nodered\n    ports:\n      - "1880:1880"\n    user: root\n\n    environment:\n      TZ: Europe/Stockholm\n\n    volumes:\n      - "./.config/syncthing/nodered:/data"\n\n    restart: unless-stopped\n\n  mealie:\n    container_name: mealie\n    image: hkotel/mealie:latest\n    restart: always\n    ports:\n      - 9925:80\n\n    environment:\n      DB_ENGINE: sqlite\n      PUID: 1000\n      PGID: 1000\n      TZ: Europe/Stockholm\n\n      # Default Recipe Settings\n      RECIPE_PUBLIC: "true"\n      RECIPE_SHOW_NUTRITION: "true"\n      RECIPE_SHOW_ASSETS: "true"\n      RECIPE_LANDSCAPE_VIEW: "true"\n      RECIPE_DISABLE_COMMENTS: "false"\n      RECIPE_DISABLE_AMOUNT: "false"\n\n    volumes:\n      - ./.config/mealie/data/:/app/data\n\nnetworks:\n  server:\n    external: true\n'})}),"\n",(0,a.jsx)(n.h3,{id:"workflow",children:"Workflow"}),"\n",(0,a.jsx)(n.p,{children:"Now we can run some commands:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Try to ping servers\n$ sake run ping\n\n# Setup Pi's\n$ sake run setup-pi\n\n# Setup Pi-Hole\n$ sake run setup-pihole\n\n# Setup Generic Server\n$ sake run setup-server\n\n# Get some machine info\n$ sake run info --all\n\n# Make modifications to docker-compose, upload it and restart it\n$ sake run server-workflow --tags server-1\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var a=s(7294);const t={},r=a.createContext(t);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);