"use strict";(self.webpackChunksake=self.webpackChunksake||[]).push([[273],{1322:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=s(5893),t=s(1151);const a={slug:"/"},i="Introduction",o={id:"introduction",title:"Introduction",description:"sake is a command runner for local and remote hosts. You define servers and tasks in a sake.yaml config file and then run the tasks on the servers.",source:"@site/../../sake/docs/introduction.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"sidebar",next:{title:"Installation",permalink:"/installation"}},l={},d=[{value:"Demo",id:"demo",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sake"})," is a command runner for local and remote hosts. You define servers and tasks in a ",(0,r.jsx)(n.code,{children:"sake.yaml"})," config file and then run the tasks on the servers."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sake"})," has tons of features:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"auto-completion of tasks, servers and tags"}),"\n",(0,r.jsxs)(n.li,{children:["SSH into servers or docker containers ",(0,r.jsx)(n.code,{children:"sake ssh <server>"})]}),"\n",(0,r.jsxs)(n.li,{children:["list servers/tasks via ",(0,r.jsx)(n.code,{children:"sake list servers|tasks"})]}),"\n",(0,r.jsxs)(n.li,{children:["present task output in a compact table format ",(0,r.jsx)(n.code,{children:"sake run <task> --output table"})]}),"\n",(0,r.jsxs)(n.li,{children:["open task/server in your preferred editor ",(0,r.jsx)(n.code,{children:"sake edit task <task>"})]}),"\n",(0,r.jsxs)(n.li,{children:["import other ",(0,r.jsx)(n.code,{children:"sake.yaml"})," configs"]}),"\n",(0,r.jsxs)(n.li,{children:["and ",(0,r.jsx)(n.a,{href:"/recipes",children:"many more!"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"demo",children:"Demo"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"demo",src:s(1193).Z+"",width:"2442",height:"1476"})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"You specify servers and tasks in a config file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:"title=sake.yaml",children:"servers:\n  localhost:\n    desc: my workstation\n    host: localhost\n    local: true\n    tags: [local]\n\n  server-1:\n    desc: hosts mealie, Node-RED\n    host: server-1.lan\n    user: samir\n    tags: [remote,pi]\n\n  pihole:\n    desc: runs pihole\n    host: pihole.lan\n    user: samir\n    tags: [remote,pi]\n\ntasks:\n  ping:\n    desc: ping server\n    cmd: echo pong\n\n  print-host:\n    name: Host\n    desc: print host\n    cmd: echo $S_HOST\n\n  print-os:\n    name: OS\n    desc: print OS\n    cmd: |\n      os=$(lsb_release -si)\n      release=$(lsb_release -sr)\n      echo \"$os $release\"\n\n  print-kernel:\n    name: Kernel\n    desc: Print kernel version\n    cmd: uname -r | awk -v FS='-' '{print $1}'\n\n  info:\n    desc: get remote info\n    target:\n      tags: [remote]\n    spec:\n      output: table\n      strategy: free\n      ignore_errors: true\n      ignore_unreachable: true\n    tasks:\n      - task: print-os\n      - task: print-kernel\n"})}),"\n",(0,r.jsx)(n.p,{children:"and then run the tasks over all or a subset of the repositories:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Simple ping command\n$ sake run ping --tags remote\n\nTASK [ping: ping server] **************\n\nserver-1.lan | pong\n\nTASK [ping: ping server] **************\n\npihole.lan | pong\n\n# Multiple tasks\n$ sake run info --all\n\n Server   | OS        | Kernel\n----------+-----------+---------\n server-1 | Debian 11 | 5.10.92\n pihole   | Debian 11 | 5.10.92\n\n# Runtime defined command\nsake exec 'sudo apt install rsync' --tags remote\n\nTASK Command ******************************************************************\n\nserver-1.lan | Reading package lists...\nserver-1.lan | Building dependency tree...\nserver-1.lan | Reading state information...\nserver-1.lan | rsync is already the newest version (3.2.3-4+deb11u1).\nserver-1.lan | 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\nTASK Command ******************************************************************\n\npihole.lan | Reading package lists...\npihole.lan | Building dependency tree...\npihole.lan | Reading state information...\npihole.lan | rsync is already the newest version (3.2.3-4+deb11u1).\npihole.lan | 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\n$ sake ssh server-1\nsamir@server-1:~ $\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1193:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/output-743601f5d126c0ad0c76aabc12c87a29.gif"},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>i});var r=s(7294);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);